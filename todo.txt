# ZiGNAL Django Project Todo List

## üß± PHASE 1: Base Structure & Models
- [x] Initialize Django project with PostgreSQL, Celery, and Redis
- [x] Create User model (Custom with AbstractUser)
- [x] Create a landing page design and layout structure
- [x] Create Company model
- [x] Create Project model
- [x] Create UserCompanyRelation and UserProjectRelation models
- [x] Create AIAgent model
- [x] Create DataSilo and DataFile models
- [x] Create Report model
- [x] Connect models via ForeignKey and ManyToMany relationships
- [x] Create migrations
- [x] Set up admin panel for testing

## üîê PHASE 2: Authentication & Permissions
- [x] Implement email login with django-allauth or django-rest-auth
- [x] Create role-based permission system (admin/member per company/project)
- [x] Set up password reset functionality
- [x] Add session management
- [x] Develop email invitation flow for companies/projects
- [x] Create user profile views
- [x] Integrate Mailgun API for transactional emails
- [x] Configure Heroku deployment with PostgreSQL and Redis add-ons
- [x] Update deprecated django-allauth settings to new format

## üìÇ PHASE 3: File Upload & Vector Storage
- [x] Implement file upload via frontend/API
- [x] Store file metadata in DataFile model
- [x] Connect content storage to DataSilo
- [x] Integrate vector database (Weaviate, Qdrant, Pinecone, or FAISS)
- [x] Create pipeline for content extraction
- [x] Implement embedding generation with OpenAI/transformers
- [x] Add file validation and security checks
- [x] Create file browsing interface

## ü§ñ PHASE 4: AI Agent & OpenAI Integration
- [x] Create agent model per project
- [x] Implement OpenAI API wrapper
- [x] Set up streaming responses via websockets or SSE
- [x] Configure AI to access project documents in DataSilo
- [x] Implement conversation history
- [x] Create prompt templates
- [x] Add rate limiting and usage tracking
- [ ] Implement fallback mechanisms

## üìä PHASE 5: Report Module
- [x] Create report template system with commands
- [x] Implement document validation for report requirements
- [x] Develop AI response generation for reports
- [x] Store report history
- [x] Associate reports with projects/companies
- [x] Add export options (PDF, etc.)
- [x] Create report scheduling functionality
- [x] Implement notifications for report completion

## üí¨ PHASE 6: Communication (Chat, Meetings, Email)
- [ ] Build global AI chat for portfolio managers
- [ ] Integrate meeting bot (Google Meet API + transcription)
- [ ] Set up email reception (Mailgun or webhook)
- [ ] Connect chat memory to DataSilo
- [ ] Implement chat interface
- [ ] Create communication archive
- [ ] Add search functionality for past communications
- [ ] Set up real-time notifications

## üåç PHASE 7: Frontend & Dashboard
- [ ] Create role-specific dashboards (portfolio vs. company owner)
- [ ] Build report overview interface
- [ ] Implement AI chat UI
- [ ] Develop file management interface
- [ ] Create report generator UI
- [ ] Add functionality to share reports with external recipients
- [ ] Implement websockets for real-time AI feedback
- [ ] Create responsive design for mobile access

## üîí PHASE 8: Security & Deployment
- [ ] Add OAuth2 / BankID / Azure AD support
- [ ] Set up Celery tasks for AI processing & transcription
- [ ] Implement logging and audit trails
- [ ] Refine permission logic
- [ ] Create Docker-compose setup
- [ ] Configure CI/CD pipeline
- [ ] Set up hosting (Railway, Fly.io, Render, or AWS)
- [ ] Implement backup strategy
- [ ] Create monitoring and alerting
- [ ] Perform security audit

## Development Environments
- [ ] Configure development environment
- [ ] Set up testing environment
- [ ] Prepare production environment
- [ ] Create environment-specific configuration
- [ ] Document environment setup process
