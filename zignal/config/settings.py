"""
Django settings for zignal project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-mcc@@y*qg7%42w)mw44s=((ukn@e7$!!*5af1+f7xvtlz(t7i%')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,mighty-wave-39560-d078d75c03f3.herokuapp.com,zignal.se,www.zignal.se').split(',')

# CSRF settings - trusted origins for cross-domain requests
CSRF_TRUSTED_ORIGINS = [
    'https://www.zignal.se',
    'https://zignal.se', 
    'https://mighty-wave-39560-d078d75c03f3.herokuapp.com'
]

# Fix Redis SSL certificate verification issues
REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')

# Force rediss:// protocol for all Redis URLs in production (Heroku)
# This ensures all Redis URLs use the same SSL-enabled scheme
if not DEBUG and REDIS_URL.startswith('rediss://'):
    # We're in production with SSL Redis
    # Ensure all Redis URLs consistently use rediss:// scheme
    def ensure_rediss_scheme(url):
        """Convert redis:// URLs to rediss:// if needed"""
        return url.replace('redis://', 'rediss://', 1) if url and url.startswith('redis://') else url
    
    # Convert all our Redis URLs
    if 'REDIS_URL' in os.environ:
        os.environ['REDIS_URL'] = ensure_rediss_scheme(os.environ['REDIS_URL'])
    
    if 'CELERY_BROKER_URL' in os.environ:
        os.environ['CELERY_BROKER_URL'] = ensure_rediss_scheme(os.environ['CELERY_BROKER_URL'])
    
    if 'CELERY_RESULT_BACKEND' in os.environ:
        os.environ['CELERY_RESULT_BACKEND'] = ensure_rediss_scheme(os.environ['CELERY_RESULT_BACKEND'])
    
    # Update local variables too
    REDIS_URL = os.environ.get('REDIS_URL')
    broker_url = os.environ.get('CELERY_BROKER_URL', REDIS_URL)
    result_backend = os.environ.get('CELERY_RESULT_BACKEND', REDIS_URL)
    
    # Update settings with corrected URLs
    CELERY_BROKER_URL = broker_url
    CELERY_RESULT_BACKEND = result_backend
    
    # For SSL connections to Redis
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'ssl_cert_reqs': None,  # Disables certificate verification
                    'ssl_check_hostname': False,  # Disables hostname checking
                },
            }
        }
    }

    # Channel layers with SSL options for Redis
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [{'address': REDIS_URL, 'ssl_cert_reqs': None, 'ssl_check_hostname': False}],
            },
        },
    }

    # Celery Redis SSL settings
    CELERY_REDIS_BACKEND_USE_SSL = {
        'ssl_cert_reqs': None,
        'ssl_check_hostname': False,
    }
    CELERY_BROKER_USE_SSL = {
        'ssl_cert_reqs': None,
        'ssl_check_hostname': False,
    }
else:
    # Default Redis settings without SSL
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

    # Channel Layers configuration
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [REDIS_URL],
            },
        },
    }

    # Celery broker settings
    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/1')
    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/2')


# Application definition

# ... existing code ... 