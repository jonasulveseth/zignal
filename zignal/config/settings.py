"""
Django settings for zignal project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-mcc@@y*qg7%42w)mw44s=((ukn@e7$!!*5af1+f7xvtlz(t7i%')

# SECURITY WARNING: don't run with debug turned on in production!
# Default to True for local development, False in production
DEBUG = True

# Override with environment variable if explicitly set to False
debug_env = os.environ.get('DEBUG', '').lower()
if debug_env in ('false', 'no', 'n', '0', 'f'):
    DEBUG = False

# Print debug mode for diagnostic purposes
print(f"DEBUG mode: {'ENABLED' if DEBUG else 'DISABLED'}")

# Set allowed hosts based on environment and DEBUG setting
if DEBUG:
    ALLOWED_HOSTS = ['*']  # Allow all hosts in debug mode
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'mighty-wave-39560-d078d75c03f3.herokuapp.com', 'zignal.se', 'www.zignal.se']
    
    # Additional hosts from environment variable
    additional_hosts = os.environ.get('ALLOWED_HOSTS', '')
    if additional_hosts:
        ALLOWED_HOSTS.extend(additional_hosts.split(','))

# Print allowed hosts for diagnostic purposes
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# CSRF settings - trusted origins for cross-domain requests
CSRF_TRUSTED_ORIGINS = [
    'https://www.zignal.se',
    'https://zignal.se', 
    'https://mighty-wave-39560-d078d75c03f3.herokuapp.com'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    
    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'anymail',
    'rest_framework',
    'storages',  # For S3 storage
    
    # Local apps
    'users',
    'agents',
    'companies',
    'projects',
    'datasilo',
    'reports',
    'invitations',
    'profiles',
    'mail_receiver',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add allauth middleware
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'zignal.config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
            'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'zignal.context_processors.settings_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'zignal.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'zignal'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'password'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

# Support for Heroku PostgreSQL
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=600)
DATABASES['default'].update(db_from_env)

# Cache configuration (using local memory cache instead of Redis)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Email domain for mail receiver
EMAIL_DOMAIN = os.getenv('EMAIL_DOMAIN', 'zignal.se')

# OpenAI API settings
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4o-mini')
OPENAI_EMBEDDINGS_MODEL = os.getenv('OPENAI_EMBEDDINGS_MODEL', 'text-embedding-ada-002')

# Meeting BaaS API Configuration
MEETINGBAAS_API_KEY = os.getenv('MEETINGBAAS_API_KEY', '')
MEETINGBAAS_API_URL = os.getenv('MEETINGBAAS_API_URL', 'https://api.meetingbaas.com/v1')
GENERATE_MEETING_SUMMARIES = os.getenv('GENERATE_MEETING_SUMMARIES', 'True') == 'True'

# Host URL for webhooks in production
HOST_URL = os.getenv('HOST_URL', 'http://localhost:8000')
if DEBUG:
    # For local development with ngrok
    NGROK_URL = os.getenv('NGROK_URL', '')
    if NGROK_URL:
        HOST_URL = NGROK_URL

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# S3 Storage Settings - Always use S3 for both development and production
# Use S3 for file storage to ensure consistent behavior across environments
print("Using S3 for file storage in all environments")
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# AWS Settings
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_DEFAULT_ACL = os.environ.get('AWS_DEFAULT_ACL', 'private')  # Files are private by default
AWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN', None)
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'eu-west-1')
AWS_LOCATION = os.environ.get('AWS_LOCATION', 'media')
AWS_IS_GZIPPED = True
AWS_S3_FILE_OVERWRITE = False  # Don't overwrite files with the same name
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_ADDRESSING_STYLE = 'virtual'  # Use virtual-hosted style URLs

# Improve error handling for S3
AWS_S3_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # 1 day cache
}

# Debug S3 settings
print(f"S3 Storage: bucket={AWS_STORAGE_BUCKET_NAME}, region={AWS_S3_REGION_NAME}, location={AWS_LOCATION}")
    
# Media config with S3
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/" if AWS_S3_CUSTOM_DOMAIN else f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/{AWS_LOCATION}/"

# Create customized S3 storage with our configured settings
from storages.backends.s3boto3 import S3Boto3Storage

class MediaStorage(S3Boto3Storage):
    location = AWS_LOCATION
    file_overwrite = AWS_S3_FILE_OVERWRITE
    default_acl = AWS_DEFAULT_ACL
    
    def _normalize_name(self, name):
        """
        Override to handle both absolute and relative paths
        This ensures consistent storage path construction 
        regardless of what Django passes in
        """
        if name.startswith('/'):
            name = name[1:]
        
        # Prevent double datasilo prefix issue
        if AWS_LOCATION == 'datasilo' and 'datasilo/datasilo/' in name:
            # Remove one of the duplicated prefixes
            name = name.replace('datasilo/datasilo/', 'datasilo/')
            print(f"Removed duplicate datasilo prefix, new path: {name}")
        
        # Check if AWS_LOCATION is set and not empty
        if AWS_LOCATION:
            # If the name already starts with the location prefix, don't add it again
            if name.startswith(f"{AWS_LOCATION}/"):
                print(f"Path already has location prefix '{AWS_LOCATION}/', keeping as is: {name}")
                # Keep the name as is, it already has the location prefix
                pass
            # If it doesn't have the location prefix, add it
            else:
                # Remove any 'media/' prefix if AWS_LOCATION is not 'media'
                if name.startswith('media/') and AWS_LOCATION != 'media':
                    name = name[6:]  # Remove 'media/'
                
                # Only add the location prefix if name doesn't already have it
                name = f"{AWS_LOCATION}/{name}"
                print(f"Adding location prefix '{AWS_LOCATION}/' to path: {name}")
                
        # If no AWS_LOCATION, but we want to use media prefix
        elif not name.startswith('media/'):
            name = f"media/{name}"
            print(f"No AWS_LOCATION, adding 'media/' prefix: {name}")
        
        # Final check for double datasilo problem (may have been introduced above)
        if 'datasilo/datasilo/' in name:
            name = name.replace('datasilo/datasilo/', 'datasilo/')
            print(f"Fixed double datasilo prefix in final check, new path: {name}")
            
        return super()._normalize_name(name)

# Make storage class directly available to apps
MEDIA_STORAGE_CLASS = MediaStorage

# Override default storage globally (must do this after MediaStorage class is defined)
from django.core.files.storage import default_storage
import django

# If Django is still initializing, do this later
if django.apps.apps.ready:
    # App registry is ready, we can update default_storage
    try:
        # Initialize a storage instance
        s3_storage = MediaStorage()
        
        # Force default_storage to use our S3 storage
        default_storage._wrapped = s3_storage
        
        print("Successfully forced S3 storage for all file operations")
    except Exception as e:
        print(f"Error forcing S3 storage: {str(e)}")

# Simplified static file serving for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email processing settings 
# Use synchronous processing instead of Celery for email handling
PROCESS_EMAILS_SYNC = True

# Replace task queue with synchronous processing
USE_SYNCHRONOUS_TASKS = True

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'core': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'datasilo': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'companies.services': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'storages': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
            },
        },
    }

# Auth settings
AUTH_USER_MODEL = 'users.User'

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    # Django default backend
    'django.contrib.auth.backends.ModelBackend',
    # django-allauth backend
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-allauth settings
SITE_ID = 1

# New django-allauth settings (recommended)
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*', 'username']

# Legacy django-allauth settings (deprecated, kept for compatibility)
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Deprecated: Use ACCOUNT_LOGIN_METHODS instead
ACCOUNT_EMAIL_REQUIRED = True  # Deprecated: Use ACCOUNT_SIGNUP_FIELDS instead
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True  # Deprecated: Use ACCOUNT_SIGNUP_FIELDS instead
ACCOUNT_USERNAME_BLACKLIST = ['admin', 'superuser']

# Additional allauth settings to help with signup issues
ACCOUNT_USERNAME_MIN_LENGTH = 1
ACCOUNT_DEBUG = True  # Enable debugging

# Prevent form resubmission issues
ACCOUNT_FORMS = {
    'signup': 'allauth.account.forms.SignupForm',
}

# Use custom adapter for better username handling
ACCOUNT_ADAPTER = 'users.adapters.CustomAccountAdapter'

# Other django-allauth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Changed from 'mandatory' to 'none'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True

# Login/Logout URLs
LOGIN_URL = 'account_login'
LOGIN_REDIRECT_URL = 'profiles:profile_view'
LOGOUT_REDIRECT_URL = 'home'

# Email settings - Development
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Email settings - Production with Mailgun
else:
    EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'
    ANYMAIL = {
        "MAILGUN_API_KEY": os.getenv('MAILGUN_API_KEY', ''),
        "MAILGUN_SENDER_DOMAIN": os.getenv('MAILGUN_DOMAIN', ''),
        "MAILGUN_API_URL": os.getenv('MAILGUN_API_URL', 'https://api.mailgun.net/v3'),
    }

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@zignal.com')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'server@zignal.com')

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Force S3 storage configuration - imported at the end to ensure it runs after Django has initialized
try:
    from zignal.fix_s3_settings import ensure_s3_storage
    
    # Call the function to ensure S3 storage is forced even if Django initialization order changes
    if django.apps.apps.ready:
        ensure_s3_storage()
        
except ImportError:
    print("WARNING: fix_s3_settings.py not found - S3 storage may not be properly configured")
