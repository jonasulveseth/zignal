"""
Django settings for zignal project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-mcc@@y*qg7%42w)mw44s=((ukn@e7$!!*5af1+f7xvtlz(t7i%')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,mighty-wave-39560-d078d75c03f3.herokuapp.com').split(',')

# CSRF settings - trusted origins for cross-domain requests
CSRF_TRUSTED_ORIGINS = [
    'https://www.zignal.se',
    'https://zignal.se', 
    'https://mighty-wave-39560-d078d75c03f3.herokuapp.com'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',
    
    # Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'anymail',
    'rest_framework',
    'channels',
    
    # Local apps
    'users',
    'agents',
    'companies',
    'projects',
    'datasilo',
    'reports',
    'invitations',
    'profiles',
    'mail_receiver',
    'notifications',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add allauth middleware
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'zignal.config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'zignal.context_processors.settings_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'zignal.config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'zignal'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'password'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

# Support for Heroku PostgreSQL
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=600)
DATABASES['default'].update(db_from_env)


# Cache and Redis settings

# Fix Redis URL scheme inconsistencies between local and production environments
redis_main_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
redis_ssl = redis_main_url.startswith('rediss://')

# Set up channel Redis URL - default to same as main Redis but with different DB
CHANNEL_REDIS_URL = os.getenv('CHANNEL_REDIS_URL', redis_main_url.replace('6379/0', '6379/3'))

# Redis settings for Celery
CELERY_RESULT_BACKEND = redis_main_url
CELERY_BROKER_URL = redis_main_url

# Redis connections need SSL settings in production
if redis_ssl:
    # SSL settings for Redis connections
    from redis.connection import ConnectionPool
    import ssl
    
    # Configure SSL settings - disable certificate verification for Heroku Redis
    REDIS_SSL_SETTINGS = {
        'ssl_cert_reqs': ssl.CERT_NONE,
        'ssl_check_hostname': False
    }
    
    # Configure Celery to use SSL for Redis
    CELERY_REDIS_BACKEND_USE_SSL = REDIS_SSL_SETTINGS
    CELERY_BROKER_USE_SSL = REDIS_SSL_SETTINGS
    
    # Apply settings to all Redis connection pools globally
    def configure_redis_ssl():
        try:
            pools = getattr(ConnectionPool, '_connection_pool_cache', {})
            for url, pool in pools.items():
                if url.startswith('rediss://'):
                    pool.connection_kwargs.update(REDIS_SSL_SETTINGS)
        except Exception as e:
            print(f"Error configuring Redis SSL pools: {str(e)}")
    
    configure_redis_ssl()

# Channel Layers
if redis_ssl:
    # In production, configure Redis with SSL settings for Channels
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [
                    {
                        'address': CHANNEL_REDIS_URL,
                        'ssl_cert_reqs': None,
                        'ssl_check_hostname': False,
                    }
                ],
            },
        },
    }
else:
    # Local development - normal config
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [CHANNEL_REDIS_URL],
            },
        },
    }

# Notification settings
NOTIFICATION_SOUND_ENABLED = os.getenv('NOTIFICATION_SOUND_ENABLED', 'True') == 'True'
NOTIFICATION_VIBRATION_ENABLED = os.getenv('NOTIFICATION_VIBRATION_ENABLED', 'True') == 'True'

# Email domain for mail receiver
EMAIL_DOMAIN = os.getenv('EMAIL_DOMAIN', 'zignal.se')

# OpenAI API settings
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-4o-mini')
OPENAI_EMBEDDINGS_MODEL = os.getenv('OPENAI_EMBEDDINGS_MODEL', 'text-embedding-ada-002')

# Meeting BaaS API Configuration
MEETINGBAAS_API_KEY = os.getenv('MEETINGBAAS_API_KEY', '')
MEETINGBAAS_API_URL = os.getenv('MEETINGBAAS_API_URL', 'https://api.meetingbaas.com/v1')
GENERATE_MEETING_SUMMARIES = os.getenv('GENERATE_MEETING_SUMMARIES', 'True') == 'True'

# Host URL for webhooks in production
HOST_URL = os.getenv('HOST_URL', 'http://localhost:8000')
if DEBUG:
    # For local development with ngrok
    NGROK_URL = os.getenv('NGROK_URL', '')
    if NGROK_URL:
        HOST_URL = NGROK_URL

# ASGI application path
ASGI_APPLICATION = 'zignal.routing.application'

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Simplified static file serving for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redis Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': redis_main_url,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': REDIS_SSL_SETTINGS if redis_ssl else {},
        }
    }
}

# Celery settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Email processing settings
PROCESS_EMAILS_SYNC = os.getenv('PROCESS_EMAILS_SYNC', 'False') == 'True'

# Auth settings
AUTH_USER_MODEL = 'users.User'

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    # Django default backend
    'django.contrib.auth.backends.ModelBackend',
    # django-allauth backend
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-allauth settings
SITE_ID = 1

# New django-allauth settings (recommended)
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*', 'username']

# Legacy django-allauth settings (deprecated, kept for compatibility)
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Deprecated: Use ACCOUNT_LOGIN_METHODS instead
ACCOUNT_EMAIL_REQUIRED = True  # Deprecated: Use ACCOUNT_SIGNUP_FIELDS instead
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True  # Deprecated: Use ACCOUNT_SIGNUP_FIELDS instead
ACCOUNT_USERNAME_BLACKLIST = ['admin', 'superuser']

# Additional allauth settings to help with signup issues
ACCOUNT_USERNAME_MIN_LENGTH = 1
ACCOUNT_DEBUG = True  # Enable debugging

# Prevent form resubmission issues
ACCOUNT_FORMS = {
    'signup': 'allauth.account.forms.SignupForm',
}

# Use custom adapter for better username handling
ACCOUNT_ADAPTER = 'users.adapters.CustomAccountAdapter'

# Other django-allauth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Changed from 'mandatory' to 'none'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True

# Login/Logout URLs
LOGIN_URL = 'account_login'
LOGIN_REDIRECT_URL = 'profiles:profile_view'
LOGOUT_REDIRECT_URL = 'home'

# Email settings - Development
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Email settings - Production with Mailgun
else:
    EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'
    ANYMAIL = {
        "MAILGUN_API_KEY": os.getenv('MAILGUN_API_KEY', ''),
        "MAILGUN_SENDER_DOMAIN": os.getenv('MAILGUN_DOMAIN', ''),
        "MAILGUN_API_URL": os.getenv('MAILGUN_API_URL', 'https://api.mailgun.net/v3'),
    }

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@zignal.com')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'server@zignal.com')

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
